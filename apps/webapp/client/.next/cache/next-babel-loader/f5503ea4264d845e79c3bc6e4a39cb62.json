{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/cloud-computer/cloud-computer/apps/webapp/client/pages/stream.js\";\nimport React from \"react\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n                                        subscription getBuild($id : Int){\\n                                              build(where:{\\n                                                id :{\\n                                                  _eq :$id\\n                                                }\\n                                              }) {\\n                                                code\\n                                              }\\n                                         }\\n                                    \"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n                    subscription getLogs($id : Int){\\n                      log(where: {build_id: {_eq: $id}}) {\\n                        log\\n                      }\\n                    }\\n                \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n                query getCloudUrl($userId : bigint){\\n                    user(where :{\\n                        id : {\\n                            _eq :$userId\\n                        }\\n                    }) {\\n                        cloud_url\\n                    }\\n                }\\n\\n            \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n                query GetLatestBuild($id : Int){\\n                    build(where: {user_id: {_eq: $id}}, order_by: {id: desc}, limit: 1) {\\n                        id\\n                        code\\n                    }\\n                }\\n\\n            \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport jwt_decode from 'jwt-decode';\nimport { Button } from \"antd\";\nimport gql from \"graphql-tag\";\nimport { compose, Subscription, withApollo } from 'react-apollo';\nimport { useEffect, useState } from 'react';\nimport { AUTH_TOKEN, HASURA_CLAIM, HASURA_USER_ID } from '../constants';\nimport { withProtectRoute } from '../lib/with-protect-route';\nimport { withStreamClient } from \"../lib/with-stream-client\";\nimport { withRouter } from \"next/router\";\nimport AnsiUp from 'ansi_up';\nconst ansi_up = new AnsiUp();\n\nconst Stream = ({\n  client,\n  streamAPI\n}) => {\n  const token = localStorage[AUTH_TOKEN];\n  const userId = jwt_decode(token)[HASURA_CLAIM][HASURA_USER_ID];\n  const [provisioning, setProvisioning] = useState(false);\n  const [build, setBuild] = useState(null);\n  /**\n   * 1. Check if there is an existing build\n   * 2. If none then provision the box\n   * 3. If existing just redirect to the new box but check the build if it is successful\n   */\n\n  useEffect(() => {\n    client.query({\n      query: gql(_templateObject()),\n      variables: {\n        id: userId\n      }\n    }).then(({\n      data: {\n        build\n      }\n    }) => {\n      if (!build.length) {\n        return streamAPI.get(\"/provision?userId=\".concat(userId)).then(data => {\n          if (data.redirect) {\n            window.location = data.redirect;\n            return;\n          }\n\n          setBuild(data.build.id);\n          setProvisioning(true);\n        });\n      }\n\n      setBuild(build[0].id);\n      setProvisioning(true);\n    });\n  }, []);\n\n  const redirect = () => {\n    client.query({\n      query: gql(_templateObject2()),\n      variables: {\n        userId: userId\n      }\n    }).then(({\n      data: {\n        user\n      }\n    }) => {\n      setTimeout(() => {\n        window.location = user[0].cloud_url;\n      }, 2000);\n    });\n  };\n\n  if (provisioning) {\n    return React.createElement(Subscription, {\n      variables: {\n        id: build\n      },\n      subscription: gql(_templateObject3()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, ({\n      data,\n      loading\n    }) => {\n      if (loading || !data) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"Fetching logs...\");\n      }\n\n      const logs = data.log.map(({\n        log\n      }, index) => {\n        return React.createElement(\"p\", {\n          key: \"log-\".concat(index),\n          style: {\n            padding: '0 15px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          styles: {\n            'white-space': 'pre-wrap'\n          },\n          dangerouslySetInnerHTML: {\n            __html: ansi_up.ansi_to_html(log).replace(/\\n/g, \"<br />\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          margin: '30px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Subscription, {\n        variables: {\n          id: build\n        },\n        subscription: gql(_templateObject4()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, ({\n        data\n      }) => {\n        if (data && data.build[0]) {\n          const buildCode = data.build[0].code;\n\n          if (+buildCode == 0) {\n            redirect();\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134\n              },\n              __self: this\n            }, \"Redirecting...\");\n          }\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"Building...\");\n      })), React.createElement(\"div\", {\n        style: {\n          overflowX: 'scroll',\n          margin: '30px',\n          background: '#2b2b2b',\n          paddingTop: '20px',\n          paddingBottom: '20px',\n          color: '#f1f1f1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, logs));\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Fetching Status...\");\n};\n/** add HOC's need for the component **/\n\n\nexport default compose(withProtectRoute, withApollo, withStreamClient, withRouter)(Stream);","map":{"version":3,"sources":["/cloud-computer/cloud-computer/apps/webapp/client/pages/stream.js"],"names":["jwt_decode","Button","gql","compose","Subscription","withApollo","useEffect","useState","AUTH_TOKEN","HASURA_CLAIM","HASURA_USER_ID","withProtectRoute","withStreamClient","withRouter","AnsiUp","ansi_up","Stream","client","streamAPI","token","localStorage","userId","provisioning","setProvisioning","build","setBuild","query","variables","id","then","data","length","get","redirect","window","location","user","setTimeout","cloud_url","loading","logs","log","map","index","padding","__html","ansi_to_html","replace","margin","buildCode","code","overflowX","background","paddingTop","paddingBottom","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAAQC,MAAR,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,OAAR,EAAiBC,YAAjB,EAA+BC,UAA/B,QAAgD,cAAhD;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,UAAR,EAAoBC,YAApB,EAAkCC,cAAlC,QAAuD,cAAvD;AACA,SAAQC,gBAAR,QAA+B,2BAA/B;AACA,SAAQC,gBAAR,QAA+B,2BAA/B;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AAEA,MAAMC,OAAO,GAAG,IAAID,MAAJ,EAAhB;;AAEA,MAAME,MAAM,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAEpC,QAAMC,KAAK,GAAGC,YAAY,CAACZ,UAAD,CAA1B;AACA,QAAMa,MAAM,GAAGrB,UAAU,CAACmB,KAAD,CAAV,CAAkBV,YAAlB,EAAgCC,cAAhC,CAAf;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,IAAD,CAAlC;AAEA;;;;;;AAKAD,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,MAAM,CAACS,KAAP,CAAa;AACTA,MAAAA,KAAK,EAAExB,GAAF,mBADI;AAUTyB,MAAAA,SAAS,EAAE;AACPC,QAAAA,EAAE,EAAEP;AADG;AAVF,KAAb,EAcCQ,IAdD,CAcM,CAAC;AAACC,MAAAA,IAAI,EAAE;AAACN,QAAAA;AAAD;AAAP,KAAD,KAAqB;AACvB,UAAI,CAACA,KAAK,CAACO,MAAX,EAAmB;AACf,eAAOb,SAAS,CAACc,GAAV,6BAAmCX,MAAnC,GACFQ,IADE,CACIC,IAAD,IAAU;AACZ,cAAIA,IAAI,CAACG,QAAT,EAAmB;AACfC,YAAAA,MAAM,CAACC,QAAP,GAAkBL,IAAI,CAACG,QAAvB;AACA;AACH;;AACDR,UAAAA,QAAQ,CAACK,IAAI,CAACN,KAAL,CAAWI,EAAZ,CAAR;AACAL,UAAAA,eAAe,CAAC,IAAD,CAAf;AACH,SARE,CAAP;AASH;;AAEDE,MAAAA,QAAQ,CAACD,KAAK,CAAC,CAAD,CAAL,CAASI,EAAV,CAAR;AACAL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH,KA7BD;AA8BH,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,QAAMU,QAAQ,GAAG,MAAM;AACnBhB,IAAAA,MAAM,CAACS,KAAP,CAAa;AACTA,MAAAA,KAAK,EAAExB,GAAF,oBADI;AAaTyB,MAAAA,SAAS,EAAE;AACPN,QAAAA,MAAM,EAAEA;AADD;AAbF,KAAb,EAiBCQ,IAjBD,CAiBM,CAAC;AAACC,MAAAA,IAAI,EAAE;AAACM,QAAAA;AAAD;AAAP,KAAD,KAAoB;AACtBC,MAAAA,UAAU,CAAC,MAAM;AACbH,QAAAA,MAAM,CAACC,QAAP,GAAkBC,IAAI,CAAC,CAAD,CAAJ,CAAQE,SAA1B;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KArBD;AAsBH,GAvBD;;AAyBA,MAAIhB,YAAJ,EAAkB;AACd,WAAO,oBAAC,YAAD;AACH,MAAA,SAAS,EAAE;AACPM,QAAAA,EAAE,EAAEJ;AADG,OADR;AAIH,MAAA,YAAY,EAAEtB,GAAF,oBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWF,CAAC;AAAC4B,MAAAA,IAAD;AAAOS,MAAAA;AAAP,KAAD,KAAqB;AAClB,UAAIA,OAAO,IAAI,CAACT,IAAhB,EAAsB;AAClB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AAGH;;AACD,YAAMU,IAAI,GAAGV,IAAI,CAACW,GAAL,CAASC,GAAT,CAAa,CAAC;AAACD,QAAAA;AAAD,OAAD,EAAQE,KAAR,KAAkB;AACxC,eAAO;AAAG,UAAA,GAAG,gBAASA,KAAT,CAAN;AAAwB,UAAA,KAAK,EAAE;AAACC,YAAAA,OAAO,EAAE;AAAV,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH;AAAK,UAAA,MAAM,EAAE;AAAC,2BAAe;AAAhB,WAAb;AACK,UAAA,uBAAuB,EAAE;AAACC,YAAAA,MAAM,EAAE9B,OAAO,CAAC+B,YAAR,CAAqBL,GAArB,EAA0BM,OAA1B,CAAkC,KAAlC,EAAyC,QAAzC;AAAT,WAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG,CAAP;AAIH,OALY,CAAb;AAOA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH;AAAK,QAAA,KAAK,EAAE;AACRC,UAAAA,MAAM,EAAE;AADA,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,YAAD;AACI,QAAA,SAAS,EAAE;AACPpB,UAAAA,EAAE,EAAEJ;AADG,SADf;AAII,QAAA,YAAY,EAAEtB,GAAF,oBAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAeK,CAAC;AAAC4B,QAAAA;AAAD,OAAD,KAAY;AAET,YAAIA,IAAI,IAAIA,IAAI,CAACN,KAAL,CAAW,CAAX,CAAZ,EAA2B;AACvB,gBAAMyB,SAAS,GAAGnB,IAAI,CAACN,KAAL,CAAW,CAAX,EAAc0B,IAAhC;;AACA,cAAI,CAACD,SAAD,IAAc,CAAlB,EAAqB;AACjBhB,YAAAA,QAAQ;AACR,mBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACH;AACJ;;AAED,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AACH,OA1BL,CAHJ,CADG,EAiCH;AAAK,QAAA,KAAK,EAAE;AACRkB,UAAAA,SAAS,EAAE,QADH;AAERH,UAAAA,MAAM,EAAE,MAFA;AAGRI,UAAAA,UAAU,EAAE,SAHJ;AAIRC,UAAAA,UAAU,EAAE,MAJJ;AAKRC,UAAAA,aAAa,EAAE,MALP;AAMRC,UAAAA,KAAK,EAAE;AANC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQKf,IARL,CAjCG,CAAP;AA4CH,KApEE,CAAP;AAsEH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ;AAKH,CApJD;AAsJA;;;AACA,eAAerC,OAAO,CAClBQ,gBADkB,EAElBN,UAFkB,EAGlBO,gBAHkB,EAIlBC,UAJkB,CAAP,CAKbG,MALa,CAAf","sourcesContent":["import jwt_decode from 'jwt-decode';\nimport {Button} from \"antd\";\nimport gql from \"graphql-tag\";\nimport {compose, Subscription, withApollo} from 'react-apollo';\nimport {useEffect, useState} from 'react';\nimport {AUTH_TOKEN, HASURA_CLAIM, HASURA_USER_ID} from '../constants';\nimport {withProtectRoute} from '../lib/with-protect-route';\nimport {withStreamClient} from \"../lib/with-stream-client\";\nimport {withRouter} from \"next/router\";\nimport AnsiUp from 'ansi_up';\n\nconst ansi_up = new AnsiUp();\n\nconst Stream = ({client, streamAPI}) => {\n\n    const token = localStorage[AUTH_TOKEN];\n    const userId = jwt_decode(token)[HASURA_CLAIM][HASURA_USER_ID];\n    const [provisioning, setProvisioning] = useState(false);\n    const [build, setBuild] = useState(null);\n\n    /**\n     * 1. Check if there is an existing build\n     * 2. If none then provision the box\n     * 3. If existing just redirect to the new box but check the build if it is successful\n     */\n    useEffect(() => {\n        client.query({\n            query: gql`\n                query GetLatestBuild($id : Int){\n                    build(where: {user_id: {_eq: $id}}, order_by: {id: desc}, limit: 1) {\n                        id\n                        code\n                    }\n                }\n\n            `,\n            variables: {\n                id: userId\n            }\n        })\n        .then(({data: {build}}) => {\n            if (!build.length) {\n                return streamAPI.get(`/provision?userId=${userId}`)\n                    .then((data) => {\n                        if (data.redirect) {\n                            window.location = data.redirect;\n                            return;\n                        }\n                        setBuild(data.build.id);\n                        setProvisioning(true);\n                    });\n            }\n\n            setBuild(build[0].id);\n            setProvisioning(true);\n        });\n    }, []);\n\n    const redirect = () => {\n        client.query({\n            query: gql`\n                query getCloudUrl($userId : bigint){\n                    user(where :{\n                        id : {\n                            _eq :$userId\n                        }\n                    }) {\n                        cloud_url\n                    }\n                }\n\n            `,\n            variables: {\n                userId: userId\n            }\n        })\n        .then(({data: {user}}) => {\n            setTimeout(() => {\n                window.location = user[0].cloud_url;\n            }, 2000);\n        });\n    };\n\n    if (provisioning) {\n        return <Subscription\n            variables={{\n                id: build\n            }}\n            subscription={gql`\n                    subscription getLogs($id : Int){\n                      log(where: {build_id: {_eq: $id}}) {\n                        log\n                      }\n                    }\n                `}>\n            {({data, loading}) => {\n                if (loading || !data) {\n                    return <div>\n                        Fetching logs...\n                    </div>\n                }\n                const logs = data.log.map(({log}, index) => {\n                    return <p key={`log-${index}`} style={{padding: '0 15px'}}>\n                        <div styles={{'white-space': 'pre-wrap'}}\n                             dangerouslySetInnerHTML={{__html: ansi_up.ansi_to_html(log).replace(/\\n/g, \"<br />\")}}></div>\n                    </p>\n                });\n\n                return <div>\n                    <div style={{\n                        margin: '30px'\n                    }}>\n                        <Subscription\n                            variables={{\n                                id: build\n                            }}\n                            subscription={gql`\n                                        subscription getBuild($id : Int){\n                                              build(where:{\n                                                id :{\n                                                  _eq :$id\n                                                }\n                                              }) {\n                                                code\n                                              }\n                                         }\n                                    `}>\n                            {({data}) => {\n\n                                if (data && data.build[0]) {\n                                    const buildCode = data.build[0].code;\n                                    if (+buildCode == 0) {\n                                        redirect();\n                                        return <div>Redirecting...</div>\n                                    }\n                                }\n\n                                return <div>Building...</div>\n                            }}\n                        </Subscription>\n                    </div>\n                    <div style={{\n                        overflowX: 'scroll',\n                        margin: '30px',\n                        background: '#2b2b2b',\n                        paddingTop: '20px',\n                        paddingBottom: '20px',\n                        color: '#f1f1f1'\n                    }}>\n                        {logs}\n                    </div>\n                </div>\n            }}\n        </Subscription>\n    }\n\n    return (\n        <div>\n            Fetching Status...\n        </div>\n    )\n};\n\n/** add HOC's need for the component **/\nexport default compose(\n    withProtectRoute,\n    withApollo,\n    withStreamClient,\n    withRouter\n)(Stream);\n"]},"metadata":{},"sourceType":"module"}