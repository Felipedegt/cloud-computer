{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/cloud-computer/cloud-computer/apps/webapp/client/lib/with-apollo-client.js\";\nimport React from 'react';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router\n      } = ctx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apollo = initApollo();\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(React.createElement(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return React.createElement(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/cloud-computer/cloud-computer/apps/webapp/client/lib/with-apollo-client.js"],"names":["React","Head","getDataFromTree","initApollo","App","Apollo","Component","getInitialProps","ctx","router","appProps","apollo","process","browser","error","console","rewind","apolloState","cache","extract","constructor","props","apolloClient","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AAClB,0BAAO,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAExC,iBAAaC,eAAb,CAA8BC,GAA9B,EAAmC;AAC/B,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA;AAAb,UAAwBD,GAA9B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIN,GAAG,CAACG,eAAR,EAAyB;AACrBG,QAAAA,QAAQ,GAAG,MAAMN,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACH,OAN8B,CAQ/B;AACA;;;AACA,YAAMG,MAAM,GAAGR,UAAU,EAAzB;;AACA,UAAI,CAACS,OAAO,CAACC,OAAb,EAAsB;AAClB,YAAI;AACA;AACA,gBAAMX,eAAe,CACjB,oBAAC,GAAD,eACQQ,QADR;AAEI,YAAA,SAAS,EAAEJ,SAFf;AAGI,YAAA,MAAM,EAAEG,MAHZ;AAII,YAAA,YAAY,EAAEE,MAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADiB,CAArB;AAQH,SAVD,CAUE,OAAOG,KAAP,EAAc;AACZ;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACH,SAhBiB,CAkBlB;AACA;;;AACAb,QAAAA,IAAI,CAACe,MAAL;AACH,OAhC8B,CAkC/B;;;AACA,YAAMC,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACOT,QADP;AAEIO,QAAAA;AAFJ;AAIH;;AAEDG,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,YAAMA,KAAN;AACA,WAAKC,YAAL,GAAoBnB,UAAU,CAACkB,KAAK,CAACJ,WAAP,CAA9B;AACH;;AAEDM,IAAAA,MAAM,GAAI;AACN,aAAO,oBAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AApDuC,GAA5C,yCACyB,iBADzB;AAsDH,CAvDD","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\n\nexport default App => {\n    return class Apollo extends React.Component {\n        static displayName = 'withApollo(App)';\n        static async getInitialProps (ctx) {\n            const { Component, router } = ctx;\n\n            let appProps = {};\n            if (App.getInitialProps) {\n                appProps = await App.getInitialProps(ctx);\n            }\n\n            // Run all GraphQL queries in the component tree\n            // and extract the resulting data\n            const apollo = initApollo();\n            if (!process.browser) {\n                try {\n                    // Run all GraphQL queries\n                    await getDataFromTree(\n                        <App\n                            {...appProps}\n                            Component={Component}\n                            router={router}\n                            apolloClient={apollo}\n                        />\n                    )\n                } catch (error) {\n                    // Prevent Apollo Client GraphQL errors from crashing SSR.\n                    // Handle them in components via the data.error prop:\n                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                    console.error('Error while running `getDataFromTree`', error)\n                }\n\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind()\n            }\n\n            // Extract query data from the Apollo store\n            const apolloState = apollo.cache.extract();\n\n            return {\n                ...appProps,\n                apolloState\n            }\n        }\n\n        constructor (props) {\n            super(props);\n            this.apolloClient = initApollo(props.apolloState)\n        }\n\n        render () {\n            return <App {...this.props} apolloClient={this.apolloClient} />\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}