{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/cloud-computer/cloud-computer/apps/webapp/client/pages/index.js\";\nimport React from \"react\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n                    mutation UpdateCloudUrl($userId: bigint,  $cloudUrl : String, $cloudUser : String) {\\n                        update_user(where:{\\n                            id: {\\n                                _eq : $userId\\n                            }\\n                        }, _set :{\\n                            cloud_url : $cloudUrl,\\n                            cloud_user : $cloudUser\\n                        }) {\\n                            returning {\\n                                id\\n                            }\\n                        }\\n                    }\\n                \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n                    query CheckIfExist($cloudUser : String){\\n                        user(where:{\\n                            cloud_user : {\\n                                _eq :$cloudUser\\n                            }\\n                        }){\\n                            id\\n                            cloud_url\\n                            cloud_user\\n                        }\\n                    }\\n                \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { compose, withApollo } from 'react-apollo';\nimport Router from 'next/router';\nimport jwt_decode from 'jwt-decode';\nimport { Col, Input, Modal, notification, Row } from 'antd';\nimport { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { AUTH_TOKEN, HASURA_CLAIM, HASURA_USER_ID } from '../constants';\nimport { withProtectRoute } from '../lib/with-protect-route';\n/** styles **/\n\nconst styles = {\n  container: {\n    paddingTop: '15%'\n  },\n  title: {\n    textAlign: 'center'\n  },\n  image: {\n    width: '150px'\n  },\n  googleImage: {\n    width: '300px'\n  },\n  cloudImageContainer: {\n    textAlign: 'right',\n    paddingRight: '50px'\n  },\n  gcpImageContainer: {\n    paddingTop: '40px',\n    paddingLeft: '10px'\n  }\n};\n\nconst Index = ({\n  client\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [cloudUser, setCloudUser] = useState(null);\n\n  const handleOk = async () => {\n    try {\n      const token = localStorage[AUTH_TOKEN];\n      const userId = jwt_decode(token)[HASURA_CLAIM][HASURA_USER_ID];\n      const {\n        data: {\n          user\n        }\n      } = await client.query({\n        query: gql(_templateObject()),\n        variables: {\n          cloudUser: cloudUser\n        }\n      });\n\n      if (user.length) {\n        return notification.error({\n          message: 'Something went wrong',\n          description: 'You cant use this cloud computer name its existing already'\n        });\n      }\n\n      await client.mutate({\n        mutation: gql(_templateObject2()),\n        variables: {\n          cloudUrl: \"https://\".concat(cloudUser, \".cloud-computer.dev\"),\n          cloudUser,\n          userId\n        }\n      });\n      notification.success({\n        message: 'Nice! its available',\n        description: 'Time to build your server. Be patient :). Let me just redirect you'\n      });\n      setTimeout(() => {\n        Router.push({\n          pathname: '/stream',\n          query: {\n            cloudUser\n          }\n        });\n      }, 500);\n    } catch (e) {\n      notification.error({\n        message: 'Something went wrong',\n        description: 'I cant seem to process this request'\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  return React.createElement(Row, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    title: \"Cloud computer\",\n    visible: visible,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Please enter the name of you cloud computer:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Input, {\n    placeholder: \"jacksonwizard\",\n    value: cloudUser,\n    onChange: cloudUser => setCloudUser(cloudUser.currentTarget.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))), React.createElement(Col, {\n    xs: 24,\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"CHOOSE PROVIDER\")), React.createElement(Col, {\n    xs: 12,\n    style: styles.cloudImageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    style: styles.image,\n    src: \"https://avatars3.githubusercontent.com/u/49678748?s=400&u=23aa86cbd4f8d9a5b2c2a8cc744c4d364903a772\",\n    alt: \"Cloud Computer\",\n    onClick: () => setVisible(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), React.createElement(Col, {\n    xs: 12,\n    style: styles.gcpImageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    style: styles.googleImage,\n    src: \"https://cloud.google.com/_static/2f77eb3e34/images/cloud/cloud-logo.svg\",\n    alt: \"Google Cloud\",\n    onClick: () => {\n      Router.push('/stream');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })));\n};\n/** add HOC's need for the component **/\n\n\nexport default compose(withProtectRoute, withApollo)(Index);","map":{"version":3,"sources":["/cloud-computer/cloud-computer/apps/webapp/client/pages/index.js"],"names":["compose","withApollo","Router","jwt_decode","Col","Input","Modal","notification","Row","useState","gql","AUTH_TOKEN","HASURA_CLAIM","HASURA_USER_ID","withProtectRoute","styles","container","paddingTop","title","textAlign","image","width","googleImage","cloudImageContainer","paddingRight","gcpImageContainer","paddingLeft","Index","client","visible","setVisible","cloudUser","setCloudUser","handleOk","token","localStorage","userId","data","user","query","variables","length","error","message","description","mutate","mutation","cloudUrl","success","setTimeout","push","pathname","e","handleCancel","currentTarget","value"],"mappings":"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","sourcesContent":["import {compose, withApollo} from 'react-apollo';\nimport Router from 'next/router';\nimport jwt_decode from 'jwt-decode';\nimport {Col, Input, Modal, notification, Row} from 'antd';\nimport {useState} from 'react';\nimport gql from 'graphql-tag';\nimport {AUTH_TOKEN, HASURA_CLAIM, HASURA_USER_ID} from '../constants';\nimport {withProtectRoute} from '../lib/with-protect-route';\n\n/** styles **/\nconst styles = {\n    container: {\n        paddingTop: '15%'\n    },\n    title: {\n        textAlign: 'center'\n    },\n    image: {\n        width: '150px'\n    },\n    googleImage: {\n        width: '300px'\n    },\n    cloudImageContainer: {\n        textAlign: 'right',\n        paddingRight: '50px'\n    },\n    gcpImageContainer: {\n        paddingTop: '40px',\n        paddingLeft: '10px'\n    }\n};\n\nconst Index = ({client}) => {\n    const [visible, setVisible] = useState(false);\n    const [cloudUser, setCloudUser] = useState(null);\n\n    const handleOk = async () => {\n        try {\n            const token = localStorage[AUTH_TOKEN];\n            const userId = jwt_decode(token)[HASURA_CLAIM][HASURA_USER_ID];\n\n            const {data: {user}} = await client.query({\n                query: gql`\n                    query CheckIfExist($cloudUser : String){\n                        user(where:{\n                            cloud_user : {\n                                _eq :$cloudUser\n                            }\n                        }){\n                            id\n                            cloud_url\n                            cloud_user\n                        }\n                    }\n                `,\n                variables: {\n                    cloudUser: cloudUser\n                }\n            });\n\n            if (user.length) {\n                return notification.error({\n                    message: 'Something went wrong',\n                    description: 'You cant use this cloud computer name its existing already',\n                });\n            }\n\n            await client.mutate({\n                mutation: gql`\n                    mutation UpdateCloudUrl($userId: bigint,  $cloudUrl : String, $cloudUser : String) {\n                        update_user(where:{\n                            id: {\n                                _eq : $userId\n                            }\n                        }, _set :{\n                            cloud_url : $cloudUrl,\n                            cloud_user : $cloudUser\n                        }) {\n                            returning {\n                                id\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    cloudUrl: `https://${cloudUser}.cloud-computer.dev`,\n                    cloudUser,\n                    userId\n                }\n            });\n\n            notification.success({\n                message: 'Nice! its available',\n                description: 'Time to build your server. Be patient :). Let me just redirect you',\n            });\n\n            setTimeout(() => {\n                Router.push({\n                    pathname: '/stream',\n                    query: {\n                        cloudUser\n                    }\n                })\n            }, 500);\n\n        } catch (e) {\n            notification.error({\n                message: 'Something went wrong',\n                description: 'I cant seem to process this request',\n            });\n        }\n    };\n    const handleCancel = () => {\n        setVisible(false);\n    };\n\n    return (\n        <Row style={styles.container}>\n            <Modal\n                title=\"Cloud computer\"\n                visible={visible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n            >\n                <p>Please enter the name of you cloud computer:</p>\n                <p><Input placeholder=\"jacksonwizard\" value={cloudUser}\n                          onChange={(cloudUser) => setCloudUser(cloudUser.currentTarget.value)}/></p>\n            </Modal>\n\n            <Col xs={24} style={styles.title}>\n                <h1>CHOOSE PROVIDER</h1>\n            </Col>\n            <Col xs={12} style={styles.cloudImageContainer}>\n                <img\n                    style={styles.image}\n                    src=\"https://avatars3.githubusercontent.com/u/49678748?s=400&amp;u=23aa86cbd4f8d9a5b2c2a8cc744c4d364903a772\"\n                    alt=\"Cloud Computer\"\n                    onClick={() => setVisible(true)}\n                />\n            </Col>\n            <Col xs={12} style={styles.gcpImageContainer}>\n                <img style={styles.googleImage}\n                     src=\"https://cloud.google.com/_static/2f77eb3e34/images/cloud/cloud-logo.svg\"\n                     alt=\"Google Cloud\"\n                     onClick={() => {\n                         Router.push('/stream')\n                     }}\n                />\n            </Col>\n        </Row>\n    )\n};\n\n/** add HOC's need for the component **/\nexport default compose(\n    withProtectRoute,\n    withApollo\n)(Index);\n"]},"metadata":{},"sourceType":"module"}