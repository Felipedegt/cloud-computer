{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/cloud-computer/cloud-computer/apps/webapp/client/lib/with-stream-client.js\";\nimport React from 'react';\nimport logdown from './logger';\nconst log = logdown('stream-client');\nexport const withStreamClient = BaseComponent => (_ref) => {\n  let props = _Object$assign({}, _ref);\n\n  const api = {\n    get: async url => {\n      try {\n        log.info('GET', \"\".concat(process.env.STREAM_HOST).concat(url));\n        /**\n         * Fetch data\n         * @type {Response}\n         */\n\n        const res = await fetch(\"\".concat(process.env.STREAM_HOST).concat(url), {\n          method: 'GET',\n          headers: {}\n        });\n        /**\n         * Check if its ok else throw it\n         */\n\n        if (res.ok) {\n          /** Serialize result **/\n          const result = await res.json();\n          log.info('RESULT', result);\n          return result;\n        }\n\n        log.error('ERROR', res);\n        throw await res.json();\n      } catch (e) {\n        throw e;\n      }\n    },\n    post: async (url, body) => {\n      try {\n        log.info(\"POST \".concat(process.env.STREAM_HOST).concat(url), body);\n        /**\n         * Fetch data\n         * @type {Response}\n         */\n\n        const res = await fetch(\"\".concat(process.env.STREAM_HOST).concat(url), {\n          method: 'POST',\n          body: _JSON$stringify(body),\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        /**\n         * Check if its ok else throw it\n         */\n\n        if (res.ok) {\n          /** Serialize result **/\n          const result = await res.json();\n          log.info('RESULT', result);\n          return result;\n        }\n\n        log.error('ERROR', res);\n        throw await res.json();\n      } catch (e) {\n        throw e;\n      }\n    }\n  };\n  return React.createElement(BaseComponent, _extends({}, props, {\n    streamAPI: api,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/cloud-computer/cloud-computer/apps/webapp/client/lib/with-stream-client.js"],"names":["React","logdown","log","withStreamClient","BaseComponent","props","api","get","url","info","process","env","STREAM_HOST","res","fetch","method","headers","ok","result","json","error","e","post","body"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,GAAG,GAAGD,OAAO,CAAC,eAAD,CAAnB;AAEA,OAAO,MAAME,gBAAgB,GAAIC,aAAD,IAAmB,UAAgB;AAAA,MAAXC,KAAW;;AAE/D,QAAMC,GAAG,GAAG;AACRC,IAAAA,GAAG,EAAE,MAAOC,GAAP,IAAe;AAChB,UAAI;AACAN,QAAAA,GAAG,CAACO,IAAJ,CAAS,KAAT,YAAmBC,OAAO,CAACC,GAAR,CAAYC,WAA/B,SAA6CJ,GAA7C;AAEA;;;;;AAIA,cAAMK,GAAG,GAAG,MAAMC,KAAK,WAAIJ,OAAO,CAACC,GAAR,CAAYC,WAAhB,SAA8BJ,GAA9B,GAAqC;AACxDO,UAAAA,MAAM,EAAE,KADgD;AAExDC,UAAAA,OAAO,EAAE;AAF+C,SAArC,CAAvB;AAKA;;;;AAGA,YAAIH,GAAG,CAACI,EAAR,EAAY;AACR;AACA,gBAAMC,MAAM,GAAG,MAAML,GAAG,CAACM,IAAJ,EAArB;AAEAjB,UAAAA,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAkBS,MAAlB;AACA,iBAAOA,MAAP;AACH;;AAEDhB,QAAAA,GAAG,CAACkB,KAAJ,CAAU,OAAV,EAAkBP,GAAlB;AACA,cAAM,MAAMA,GAAG,CAACM,IAAJ,EAAZ;AACH,OAzBD,CAyBE,OAAOE,CAAP,EAAU;AACR,cAAMA,CAAN;AACH;AACJ,KA9BO;AA+BRC,IAAAA,IAAI,EAAE,OAAOd,GAAP,EAAYe,IAAZ,KAAqB;AACvB,UAAI;AACArB,QAAAA,GAAG,CAACO,IAAJ,gBAAiBC,OAAO,CAACC,GAAR,CAAYC,WAA7B,SAA2CJ,GAA3C,GAAkDe,IAAlD;AACA;;;;;AAIA,cAAMV,GAAG,GAAG,MAAMC,KAAK,WAAIJ,OAAO,CAACC,GAAR,CAAYC,WAAhB,SAA8BJ,GAA9B,GAAqC;AACxDO,UAAAA,MAAM,EAAE,MADgD;AAExDQ,UAAAA,IAAI,EAAG,gBAAeA,IAAf,CAFiD;AAGxDP,UAAAA,OAAO,EAAE;AACL,sBAAU,kBADL;AAEL,4BAAgB;AAFX;AAH+C,SAArC,CAAvB;AASA;;;;AAGA,YAAIH,GAAG,CAACI,EAAR,EAAY;AACR;AACA,gBAAMC,MAAM,GAAG,MAAML,GAAG,CAACM,IAAJ,EAArB;AAEAjB,UAAAA,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAkBS,MAAlB;AACA,iBAAOA,MAAP;AACH;;AACDhB,QAAAA,GAAG,CAACkB,KAAJ,CAAU,OAAV,EAAkBP,GAAlB;AACA,cAAM,MAAMA,GAAG,CAACM,IAAJ,EAAZ;AACH,OA3BD,CA2BE,OAAOE,CAAP,EAAU;AACR,cAAMA,CAAN;AACH;AACJ;AA9DO,GAAZ;AAiEA,SAAO,oBAAC,aAAD,eAAmBhB,KAAnB;AAA0B,IAAA,SAAS,EAAEC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CApEM","sourcesContent":["import React from 'react';\nimport logdown from './logger';\n\nconst log = logdown('stream-client');\n\nexport const withStreamClient = (BaseComponent) => ({...props}) => {\n\n    const api = {\n        get: async (url) => {\n            try {\n                log.info('GET', `${process.env.STREAM_HOST}${url}`);\n\n                /**\n                 * Fetch data\n                 * @type {Response}\n                 */\n                const res = await fetch(`${process.env.STREAM_HOST}${url}`, {\n                    method: 'GET',\n                    headers: {}\n                });\n\n                /**\n                 * Check if its ok else throw it\n                 */\n                if (res.ok) {\n                    /** Serialize result **/\n                    const result = await res.json();\n\n                    log.info('RESULT',result);\n                    return result;\n                }\n\n                log.error('ERROR',res);\n                throw await res.json();\n            } catch (e) {\n                throw e;\n            }\n        },\n        post: async (url, body) => {\n            try {\n                log.info(`POST ${process.env.STREAM_HOST}${url}`, body);\n                /**\n                 * Fetch data\n                 * @type {Response}\n                 */\n                const res = await fetch(`${process.env.STREAM_HOST}${url}`, {\n                    method: 'POST',\n                    body : JSON.stringify(body),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    },\n                });\n\n                /**\n                 * Check if its ok else throw it\n                 */\n                if (res.ok) {\n                    /** Serialize result **/\n                    const result = await res.json();\n\n                    log.info('RESULT',result);\n                    return result;\n                }\n                log.error('ERROR',res);\n                throw await res.json();\n            } catch (e) {\n                throw e;\n            }\n        }\n    };\n\n    return <BaseComponent {...props} streamAPI={api}/>\n};"]},"metadata":{},"sourceType":"module"}