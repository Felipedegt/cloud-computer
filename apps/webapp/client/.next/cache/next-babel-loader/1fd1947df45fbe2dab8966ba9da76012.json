{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport { split } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { setContext } from 'apollo-link-context';\nimport Router from 'next/dist/client/router';\nimport { AUTH_TOKEN } from '../constants';\nlet apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  const wsLink = process.browser ? new WebSocketLink({\n    uri: `${process.env.REACT_APP_WEBSOCKET_HOST}`,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(AUTH_TOKEN)}`\n        }\n      }\n    }\n  }) : null;\n  const httpLink = new HttpLink({\n    uri: `${process.env.REACT_APP_HOST}`\n  });\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) {\n      let noAuthentication = false;\n      graphQLErrors.map(({\n        message,\n        locations,\n        path\n      }) => {\n        if ('Missing Authorization header in JWT authentication mode' === message) {\n          noAuthentication = true;\n        }\n\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n      });\n\n      if (noAuthentication) {\n        return Router.push(`/login`);\n      }\n    }\n\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    const token = localStorage.getItem(AUTH_TOKEN);\n\n    let baseHeaders = _objectSpread({}, headers); // Check if there is a token\n\n\n    if (token) {\n      baseHeaders.authorization = `Bearer ${token}`;\n    }\n\n    return {\n      headers: baseHeaders\n    };\n  });\n  const link = process.browser ? split( // split based on operation type\n  ({\n    query\n  }) => {\n    const {\n      kind,\n      operation\n    } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  }, wsLink, httpLink) : httpLink;\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(errorLink.concat(link)),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/cloud-computer/cloud-computer/apps/webapp/client/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","split","onError","WebSocketLink","getMainDefinition","setContext","Router","AUTH_TOKEN","apolloClient","process","browser","global","create","initialState","wsLink","uri","env","REACT_APP_WEBSOCKET_HOST","options","reconnect","connectionParams","headers","Authorization","localStorage","getItem","httpLink","REACT_APP_HOST","errorLink","graphQLErrors","networkError","noAuthentication","map","message","locations","path","console","log","push","authLink","_","token","baseHeaders","authorization","link","query","kind","operation","connectToDevTools","ssrMode","concat","cache","restore","initApollo"],"mappings":"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","sourcesContent":["import {ApolloClient, InMemoryCache, HttpLink} from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nimport {split} from 'apollo-link';\nimport {onError} from 'apollo-link-error';\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {getMainDefinition} from 'apollo-utilities';\nimport {setContext} from 'apollo-link-context';\nimport Router from 'next/dist/client/router';\nimport {AUTH_TOKEN} from '../constants';\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n    global.fetch = fetch;\n}\n\nfunction create(initialState) {\n    const wsLink = process.browser\n        ? new WebSocketLink({\n            uri: `${process.env.REACT_APP_WEBSOCKET_HOST}`,\n            options: {\n                reconnect: true,\n                connectionParams: {\n                    headers: {\n                        Authorization: `Bearer ${localStorage.getItem(AUTH_TOKEN)}`\n                    }\n                }\n            }\n        })\n        : null;\n\n    const httpLink = new HttpLink({\n        uri: `${process.env.REACT_APP_HOST}`\n    });\n\n    const errorLink = onError(({graphQLErrors, networkError}) => {\n        if (graphQLErrors) {\n            let noAuthentication = false;\n            graphQLErrors.map(({message, locations, path}) => {\n                if ('Missing Authorization header in JWT authentication mode' === message) {\n                    noAuthentication = true;\n                }\n                console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n            });\n            if (noAuthentication) {\n                return Router.push(`/login`);\n            }\n        }\n\n        if (networkError) console.log(`[Network error]: ${networkError}`);\n    });\n\n    const authLink = setContext((_, {headers}) => {\n        const token = localStorage.getItem(AUTH_TOKEN);\n        let baseHeaders = {\n            ...headers\n        };\n\n        // Check if there is a token\n        if (token) {\n            baseHeaders.authorization = `Bearer ${token}`;\n        }\n        return {headers: baseHeaders};\n    });\n\n    const link = process.browser\n        ? split(\n            // split based on operation type\n            ({query}) => {\n                const {kind, operation} = getMainDefinition(query);\n                return kind === 'OperationDefinition' && operation === 'subscription';\n            },\n            wsLink,\n            httpLink\n        )\n        : httpLink;\n\n    return new ApolloClient({\n        connectToDevTools: process.browser,\n        ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n        link: authLink.concat(errorLink.concat(link)),\n        cache: new InMemoryCache().restore(initialState || {})\n    });\n}\n\nexport default function initApollo(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (!process.browser) {\n        return create(initialState);\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = create(initialState);\n    }\n\n    return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}